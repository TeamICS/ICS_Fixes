diff -u hardware/msm7k/libaudio/Android.mk hardware/msm7k/libaudio/Android.mk
--- hardware/msm7k/libaudio/Android.mk	2011-11-18 22:11:47.799689928 -0500
+++ hardware/msm7k/libaudio/Android.mk	2011-11-18 13:27:41.000000000 -0500
@@ -1,52 +1,58 @@
-
+ifeq ($(TARGET_BOOTLOADER_BOARD_NAME),heroc)
 ifneq ($(BUILD_TINY_ANDROID),true)
 
 LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
 
-LOCAL_SRC_FILES:=               \
-    AudioPolicyManager.cpp
+LOCAL_MODULE := libaudio
 
 LOCAL_SHARED_LIBRARIES := \
     libcutils \
     libutils \
-    libmedia
+    libmedia \
+    libhardware_legacy \
+    libcutils \
+    libsysutils
 
-LOCAL_STATIC_LIBRARIES := libaudiopolicybase
+ifeq ($TARGET_OS)-$(TARGET_SIMULATOR),linux-true)
+LOCAL_LDLIBS += -ldl
+endif
 
-LOCAL_MODULE:= libaudiopolicy
-LOCAL_MODULE_TAGS:= optional
+ifneq ($(TARGET_SIMULATOR),true)
+LOCAL_SHARED_LIBRARIES += libdl
+endif
+
+LOCAL_SRC_FILES += AudioHardware.cpp
+
+LOCAL_CFLAGS += -fno-short-enums
+
+LOCAL_STATIC_LIBRARIES += A2dpAudioInterface
 ifeq ($(BOARD_HAVE_BLUETOOTH),true)
-  LOCAL_CFLAGS += -DWITH_A2DP
+  LOCAL_SHARED_LIBRARIES += audio.a2dp.default libbinder
 endif
 
 include $(BUILD_SHARED_LIBRARY)
 
-
 include $(CLEAR_VARS)
 
-LOCAL_MODULE := libaudio
-LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES:=               \
+    AudioPolicyManager.cpp
 
 LOCAL_SHARED_LIBRARIES := \
     libcutils \
     libutils \
-    libmedia \
-    libhardware_legacy
-
-LOCAL_SHARED_LIBRARIES += libdl
+    libmedia
 
-LOCAL_SRC_FILES += AudioHardware.cpp
+LOCAL_STATIC_LIBRARIES := libaudiopolicy_legacy
 
-LOCAL_CFLAGS += -fno-short-enums
+LOCAL_MODULE:= libaudiopolicy
 
-LOCAL_STATIC_LIBRARIES += libaudiointerface
 ifeq ($(BOARD_HAVE_BLUETOOTH),true)
-  LOCAL_SHARED_LIBRARIES += liba2dp
+  LOCAL_CFLAGS += -DWITH_A2DP
 endif
 
 include $(BUILD_SHARED_LIBRARY)
 
 endif # not BUILD_TINY_ANDROID
-
+endif # TARGET_BOOTLOADER_BOARD_NAME
diff -u hardware/msm7k/libaudio/AudioHardware.cpp hardware/msm7k/libaudio/AudioHardware.cpp
--- hardware/msm7k/libaudio/AudioHardware.cpp	2011-11-18 22:11:47.799689928 -0500
+++ hardware/msm7k/libaudio/AudioHardware.cpp	2011-11-18 11:12:08.000000000 -0500
@@ -36,7 +36,8 @@
 
 #define LOG_SND_RPC 0  // Set to 1 to log sound RPC's
 
-namespace android {
+//namespace android {
+namespace android_audio_legacy{
 static int audpre_index, tx_iir_index;
 static void * acoustic;
 const uint32_t AudioHardware::inputSamplingRates[] = {
@@ -158,7 +159,8 @@
         uint32_t devices, int *format, uint32_t *channels, uint32_t *sampleRate, status_t *status)
 {
     { // scope for the lock
-        Mutex::Autolock lock(mLock);
+        //Mutex::Autolock lock(mLock);
+		android::Mutex::Autolock lock(mLock);
 
         // only one output stream allowed
         if (mOutput) {
@@ -184,7 +186,8 @@
 }
 
 void AudioHardware::closeOutputStream(AudioStreamOut* out) {
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+	android::Mutex::Autolock lock(mLock);
     if (mOutput == 0 || mOutput != out) {
         LOGW("Attempt to close invalid output stream");
     }
@@ -223,7 +226,8 @@
 }
 
 void AudioHardware::closeInputStream(AudioStreamIn* in) {
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+  	android::Mutex::Autolock lock(mLock);
 
     ssize_t index = mInputs.indexOf((AudioStreamInMSM72xx *)in);
     if (index < 0) {
@@ -258,7 +262,8 @@
 
 status_t AudioHardware::setMicMute(bool state)
 {
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+     android::Mutex::Autolock lock(mLock);
     return setMicMute_nosync(state);
 }
 
@@ -410,14 +415,16 @@
     LOGD("setVoiceVolume(%f)\n", v);
     LOGI("Setting in-call volume to %d (available range is 0 to 5)\n", vol);
 
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+     android::Mutex::Autolock lock(mLock);
     set_volume_rpc(SND_DEVICE_CURRENT, SND_METHOD_VOICE, vol);
     return NO_ERROR;
 }
 
 status_t AudioHardware::setMasterVolume(float v)
 {
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+      android::Mutex::Autolock lock(mLock);
     int vol = ceil(v * 5.0);
     LOGI("Set master volume to %d.\n", vol);
     /*
@@ -494,7 +501,8 @@
     if (!acoustic)
         return 0;
 
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+    android::Mutex::Autolock lock(mLock);
     uint32_t outputDevices = mOutput->devices();
     status_t ret = NO_ERROR;
     int (*msm72xx_enable_audpp)(int);
@@ -589,7 +597,8 @@
 
 status_t AudioHardware::checkMicMute()
 {
-    Mutex::Autolock lock(mLock);
+    //Mutex::Autolock lock(mLock);
+    android::Mutex::Autolock lock(mLock);
     if (mMode != AudioSystem::MODE_IN_CALL) {
         setMicMute_nosync(true);
     }
@@ -1013,7 +1022,7 @@
     uint8_t* p = static_cast<uint8_t*>(buffer);
 
     if (mState < AUDIO_INPUT_OPENED) {
-        Mutex::Autolock lock(mHardware->mLock);
+        android::Mutex::Autolock lock(mHardware->mLock);
         if (set(mHardware, mDevices, &mFormat, &mChannels, &mSampleRate, mAcoustics) != NO_ERROR) {
             return -1;
         }
diff -u hardware/msm7k/libaudio/AudioHardware.h hardware/msm7k/libaudio/AudioHardware.h
--- hardware/msm7k/libaudio/AudioHardware.h	2011-11-18 22:11:47.799689928 -0500
+++ hardware/msm7k/libaudio/AudioHardware.h	2011-11-18 11:03:37.000000000 -0500
@@ -29,7 +29,8 @@
 #include <linux/msm_audio.h>
 }
 
-namespace android {
+//namespace android {
+namespace android_audio_legacy {
 
 // ----------------------------------------------------------------------------
 // Kernel driver interface
@@ -180,6 +181,8 @@
         virtual String8     getParameters(const String8& keys);
                 uint32_t    devices() { return mDevices; }
         virtual status_t    getRenderPosition(uint32_t *dspFrames);
+        virtual status_t    addAudioEffect(effect_handle_t effect){return INVALID_OPERATION;}
+        virtual status_t    removeAudioEffect(effect_handle_t effect){return INVALID_OPERATION;}
 
     private:
                 AudioHardware* mHardware;
@@ -219,6 +222,8 @@
         virtual unsigned int  getInputFramesLost() const { return 0; }
                 uint32_t    devices() { return mDevices; }
                 int         state() const { return mState; }
+        virtual status_t    addAudioEffect(effect_handle_t effect){return INVALID_OPERATION;}
+        virtual status_t    removeAudioEffect(effect_handle_t effect){return INVALID_OPERATION;}
 
     private:
                 AudioHardware* mHardware;
@@ -239,15 +244,16 @@
             bool        mBluetoothNrec;
             uint32_t    mBluetoothId;
             AudioStreamOutMSM72xx*  mOutput;
-            SortedVector <AudioStreamInMSM72xx*>   mInputs;
+            //SortedVector <AudioStreamInMSM72xx*>   mInputs;
+            android::SortedVector<AudioStreamInMSM72xx*>   mInputs;
 
             msm_snd_endpoint *mSndEndpoints;
             int mNumSndEndpoints;
             int mCurSndDevice;
 
      friend class AudioStreamInMSM72xx;
-            Mutex       mLock;
-
+            //Mutex       mLock;
+            android::Mutex       mLock;
             int SND_DEVICE_CURRENT;
             int SND_DEVICE_HANDSET;
             int SND_DEVICE_SPEAKER;
diff -u hardware/msm7k/libaudio/AudioPolicyManager.cpp hardware/msm7k/libaudio/AudioPolicyManager.cpp
--- hardware/msm7k/libaudio/AudioPolicyManager.cpp	2011-11-18 22:11:47.799689928 -0500
+++ hardware/msm7k/libaudio/AudioPolicyManager.cpp	2011-11-18 11:04:49.000000000 -0500
@@ -20,7 +20,8 @@
 #include "AudioPolicyManager.h"
 #include <media/mediarecorder.h>
 
-namespace android {
+//namespace android {
+namespace android_audio_legacy {
 
 
 
diff -u hardware/msm7k/libaudio/AudioPolicyManager.h hardware/msm7k/libaudio/AudioPolicyManager.h
--- hardware/msm7k/libaudio/AudioPolicyManager.h	2011-11-18 22:11:47.799689928 -0500
+++ hardware/msm7k/libaudio/AudioPolicyManager.h	2011-11-18 11:05:20.000000000 -0500
@@ -23,7 +23,9 @@
 #include <hardware_legacy/AudioPolicyManagerBase.h>
 
 
-namespace android {
+//namespace android {
+
+namespace android_audio_legacy {
 
 class AudioPolicyManager: public AudioPolicyManagerBase
 {
